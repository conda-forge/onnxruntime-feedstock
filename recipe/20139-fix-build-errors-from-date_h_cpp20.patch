From d962845b618772c9114073eae6c8eb8056377b96 Mon Sep 17 00:00:00 2001
From: afantino951 <andrew.fantino.951@gmail.com>
Date: Thu, 28 Mar 2024 22:36:47 -0700
Subject: [PATCH 1/4] Fix build errors from date/date.h C++20 compatibility

---
 cmake/onnxruntime_common.cmake                            | 2 +-
 include/onnxruntime/core/common/logging/logging.h         | 8 ++++++++
 onnxruntime/core/common/logging/sinks/ostream_sink.cc     | 3 +--
 onnxruntime/core/platform/apple/logging/apple_log_sink.mm | 2 +-
 onnxruntime/test/common/logging/helpers.h                 | 3 +--
 onnxruntime/test/util/include/test/capturing_sink.h       | 4 +---
 6 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/cmake/onnxruntime_common.cmake b/cmake/onnxruntime_common.cmake
index fb56e3f3445d..69d8f5fa138c 100644
--- a/cmake/onnxruntime_common.cmake
+++ b/cmake/onnxruntime_common.cmake
@@ -129,7 +129,7 @@ target_include_directories(onnxruntime_common
         ${OPTIONAL_LITE_INCLUDE_DIR})
 
 
-target_link_libraries(onnxruntime_common PUBLIC safeint_interface ${GSL_TARGET} ${ABSEIL_LIBS})
+target_link_libraries(onnxruntime_common PUBLIC safeint_interface ${GSL_TARGET} ${ABSEIL_LIBS} date::date)
 
 add_dependencies(onnxruntime_common ${onnxruntime_EXTERNAL_DEPENDENCIES})
 
diff --git a/include/onnxruntime/core/common/logging/logging.h b/include/onnxruntime/core/common/logging/logging.h
index 2b9912ea7738..741b37d6b86d 100644
--- a/include/onnxruntime/core/common/logging/logging.h
+++ b/include/onnxruntime/core/common/logging/logging.h
@@ -18,6 +18,8 @@
 
 #include "core/common/logging/macros.h"
 
+#include "date/date.h"
+
 /*
 
   Logging overview and expected usage:
@@ -56,6 +58,12 @@ namespace logging {
 
 using Timestamp = std::chrono::time_point<std::chrono::system_clock>;
 
+#if __cplusplus >= 202002L
+namespace timestamp_ns = std::chrono;
+#else
+namespace timestamp_ns = ::date;
+#endif
+
 #ifndef NDEBUG
 ORT_ATTRIBUTE_UNUSED static bool vlog_enabled = true;  // Set directly based on your needs.
 #else
diff --git a/onnxruntime/core/common/logging/sinks/ostream_sink.cc b/onnxruntime/core/common/logging/sinks/ostream_sink.cc
index 0db3d8709d48..a120138d1d15 100644
--- a/onnxruntime/core/common/logging/sinks/ostream_sink.cc
+++ b/onnxruntime/core/common/logging/sinks/ostream_sink.cc
@@ -2,7 +2,6 @@
 // Licensed under the MIT License.
 
 #include "core/common/logging/sinks/ostream_sink.h"
-#include "date/date.h"
 
 namespace onnxruntime {
 namespace logging {
@@ -24,7 +23,7 @@ struct Color {
 
 void OStreamSink::SendImpl(const Timestamp& timestamp, const std::string& logger_id, const Capture& message) {
   // operator for formatting of timestamp in ISO8601 format including microseconds
-  using date::operator<<;
+  using timestamp_ns::operator<<;
 
   // Two options as there may be multiple calls attempting to write to the same sink at once:
   // 1) Use mutex to synchronize access to the stream.
diff --git a/onnxruntime/core/platform/apple/logging/apple_log_sink.mm b/onnxruntime/core/platform/apple/logging/apple_log_sink.mm
index 8dbd8eecd0e7..78614ffd2819 100644
--- a/onnxruntime/core/platform/apple/logging/apple_log_sink.mm
+++ b/onnxruntime/core/platform/apple/logging/apple_log_sink.mm
@@ -13,7 +13,7 @@
 namespace logging {
 
 void AppleLogSink::SendImpl(const Timestamp& timestamp, const std::string& logger_id, const Capture& message) {
-  using date::operator<<;
+  using timestamp_ns::operator<<;
   std::ostringstream msg;
   msg << timestamp << " [" << message.SeverityPrefix() << ":" << message.Category() << ":" << logger_id << ", "
       << message.Location().ToString() << "] " << message.Message();
diff --git a/onnxruntime/test/common/logging/helpers.h b/onnxruntime/test/common/logging/helpers.h
index c8d027022850..7fd03b72e53a 100644
--- a/onnxruntime/test/common/logging/helpers.h
+++ b/onnxruntime/test/common/logging/helpers.h
@@ -5,7 +5,6 @@
 
 #include <sstream>
 
-#include "date/date.h"
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
 
@@ -30,7 +29,7 @@ class MockSink : public ::onnxruntime::logging::ISink {
 #endif
 
 ACTION(PrintArgs) {
-  using date::operator<<;
+  using onnxruntime::logging::timestamp_ns::operator<<;
 
   // const Timestamp &timestamp, const std::string &logger_id, const Message &message
   //                  arg0                          arg1                        arg2
diff --git a/onnxruntime/test/util/include/test/capturing_sink.h b/onnxruntime/test/util/include/test/capturing_sink.h
index 39788947602d..7d978d1bd1e5 100644
--- a/onnxruntime/test/util/include/test/capturing_sink.h
+++ b/onnxruntime/test/util/include/test/capturing_sink.h
@@ -6,8 +6,6 @@
 #include "core/common/logging/logging.h"
 #include "core/common/logging/isink.h"
 
-#include "date/date.h"
-
 namespace onnxruntime {
 namespace test {
 
@@ -17,7 +15,7 @@ class CapturingSink : public logging::ISink {
  public:
   void SendImpl(const Timestamp& timestamp, const std::string& logger_id, const Capture& message) override {
     // operator for formatting of timestamp in ISO8601 format including microseconds
-    using date::operator<<;
+    using timestamp_ns::operator<<;
     std::ostringstream msg;
 
     msg << timestamp << " [" << message.SeverityPrefix() << ":" << message.Category() << ":" << logger_id << ", "

From 305281e818619d2aa7a28c6d961d8bdda60b13d2 Mon Sep 17 00:00:00 2001
From: afantino951 <andrew.fantino.951@gmail.com>
Date: Fri, 29 Mar 2024 13:56:28 -0700
Subject: [PATCH 2/4] Fix Xcode 14.2 v 14.4 std:chrono implementation

---
 include/onnxruntime/core/common/logging/logging.h | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/include/onnxruntime/core/common/logging/logging.h b/include/onnxruntime/core/common/logging/logging.h
index 741b37d6b86d..b41bcb6b39b4 100644
--- a/include/onnxruntime/core/common/logging/logging.h
+++ b/include/onnxruntime/core/common/logging/logging.h
@@ -58,7 +58,8 @@ namespace logging {
 
 using Timestamp = std::chrono::time_point<std::chrono::system_clock>;
 
-#if __cplusplus >= 202002L
+// NOTE When other compilers support std::chrono::operator<<, update this.
+#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 140400L
 namespace timestamp_ns = std::chrono;
 #else
 namespace timestamp_ns = ::date;

From ac49e3095a88f55539902a2d1a79e26b52d438a3 Mon Sep 17 00:00:00 2001
From: Andrew Fantino <15876180+afantino951@users.noreply.github.com>
Date: Mon, 1 Apr 2024 18:02:30 -0700
Subject: [PATCH 3/4] Update logging.h with code review

---
 include/onnxruntime/core/common/logging/logging.h | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/include/onnxruntime/core/common/logging/logging.h b/include/onnxruntime/core/common/logging/logging.h
index b41bcb6b39b4..dd16461176da 100644
--- a/include/onnxruntime/core/common/logging/logging.h
+++ b/include/onnxruntime/core/common/logging/logging.h
@@ -58,8 +58,10 @@ namespace logging {
 
 using Timestamp = std::chrono::time_point<std::chrono::system_clock>;
 
-// NOTE When other compilers support std::chrono::operator<<, update this.
-#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 140400L
+// TODO When other compilers support std::chrono::operator<<, update this.
+// TODO Check support for other compilers' version before enable C++20 for other compilers 
+// Xcode added support for C++20's std::chrono::operator<< in version 14.4.
+#if __cplusplus >= 202002L && __MAC_OS_X_VERSION_MAX_ALLOWED >= 140400L
 namespace timestamp_ns = std::chrono;
 #else
 namespace timestamp_ns = ::date;

From 608de5d7306c8caa5dbaedbbcb853f2a8f420bc7 Mon Sep 17 00:00:00 2001
From: afantino951 <andrew.fantino.951@gmail.com>
Date: Tue, 2 Apr 2024 12:31:41 -0700
Subject: [PATCH 4/4] Add SDK to comment and fix linting errors

---
 include/onnxruntime/core/common/logging/logging.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/onnxruntime/core/common/logging/logging.h b/include/onnxruntime/core/common/logging/logging.h
index dd16461176da..f62053a5e44a 100644
--- a/include/onnxruntime/core/common/logging/logging.h
+++ b/include/onnxruntime/core/common/logging/logging.h
@@ -58,9 +58,9 @@ namespace logging {
 
 using Timestamp = std::chrono::time_point<std::chrono::system_clock>;
 
-// TODO When other compilers support std::chrono::operator<<, update this.
-// TODO Check support for other compilers' version before enable C++20 for other compilers 
-// Xcode added support for C++20's std::chrono::operator<< in version 14.4.
+// TODO: When other compilers support std::chrono::operator<<, update this.
+// TODO: Check support for other compilers' version before enable C++20 for other compilers.
+// Xcode added support for C++20's std::chrono::operator<< in SDK version 14.4.
 #if __cplusplus >= 202002L && __MAC_OS_X_VERSION_MAX_ALLOWED >= 140400L
 namespace timestamp_ns = std::chrono;
 #else
